/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è my_order –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ my_order = false –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º, 
 * –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—è (—Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã)
 */

const { MongoClient } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/natalicar';

async function migrateMyOrderField() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    
    const db = client.db();
    const ordersCollection = db.collection('orders');
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –ø–æ–ª—è my_order
    const ordersWithoutMyOrderField = await ordersCollection.countDocuments({
      my_order: { $exists: false }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${ordersWithoutMyOrderField} –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –ø–æ–ª—è my_order`);
    
    if (ordersWithoutMyOrderField === 0) {
      console.log('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–º–µ—é—Ç –ø–æ–ª–µ my_order. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –ø–æ–ª—è my_order, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ false
    const result = await ordersCollection.updateMany(
      { my_order: { $exists: false } },
      { $set: { my_order: false } }
    );
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.modifiedCount} –∑–∞–∫–∞–∑–æ–≤`);
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –ø–æ–ª—è: ${ordersWithoutMyOrderField}`);
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${result.modifiedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalOrders = await ordersCollection.countDocuments({});
    const ordersWithMyOrderTrue = await ordersCollection.countDocuments({ my_order: true });
    const ordersWithMyOrderFalse = await ordersCollection.countDocuments({ my_order: false });
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`);
    console.log(`   - –ó–∞–∫–∞–∑–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (my_order = true): ${ordersWithMyOrderTrue}`);
    console.log(`   - –ê–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (my_order = false): ${ordersWithMyOrderFalse}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.close();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateMyOrderField()
    .then(() => {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { migrateMyOrderField };
